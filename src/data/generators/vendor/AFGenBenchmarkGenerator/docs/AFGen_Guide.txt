AFGen Documentation
===================

Three small applications are provided. There is a GUI version of the
generator, a CLI version of the generator, and a CLI utility for calculating
the q* value for a provided p. In addition to the D(n,p,q) generator, the 
tools have options to generate a modified file by providing two additional 
parameters: 
	s being the likely hood of a new attack being added, 
	r being chance of an existing attack being removed. 
This will allow the generator to also be used within the dynamic track while
providing much more flexibility over the difficult and properties of the 
generated modified benchmark.

The tools were written in Java and packaged as self-executable jar files so 
are ready to run. Java 8+ is required to run the jar files, which have been
tested with both Oracle's Java distribution and the Open JVM distribution. 
For the GUI version, JavaFX is required which is included in Oracle's 
distribution but is a separate download for Open JVM.

AFGenGUI
--------
java -jar AFGenGUI.jar

As I am more familiar with working in GUI environments the preliminary version
of the tool was developed using the JavaFX library as this is the standard GUI
library for Java. It should be noted that while JavaFX was meant to be a 
replacement for the Swing library, Oracle has decided to depreciate it in the
future returning to just supporting Swing. We were not aware of this until 
after development of the GUI implementation was completed. The GUI version of
the tool allows for quickly being able to plug in values and by having a text
area that shows output, being able to quickly see the ﬁles being generated so
it is easy to see how diﬀerent parameters aﬀect the generation. From a user 
perspective, this makes it easy to quickly generate a series of test ﬁles to 
use as benchmarks.

The parameters n, p, q are set up using the label of the parameter on the 
left of the input ﬁelds with a better explanation of the ﬁeld on the right of 
the input ﬁeld. The Button for generating the benchmark is initially the only 
enabled button as there is nothing to save or modify until a benchmark is 
generated. Once generated the two diﬀerent save formats are enabled allowing 
the user to save the generated benchmark in which of the two ﬁle formats they 
need or to save both. Standard dialog boxes for where to save the ﬁles are 
used which will vary based on the operating system being used.

To ease in development, the text area at the bottom of the display shows the 
save information making it easy to validate that the information is correct 
and expected. This also ended up being a very handy feature for normal use so 
was left in the application. 

While not a requirement of the project, it is also possible to generate the 
extension ﬁles for the dynamic track by using the r and s ﬁelds. The r ﬁeld is 
the chance that a vertex will attack a vertex that it is not already attacking 
while s is the chance that a vertex will stop attacking a vertex that it is 
already attacking. The modiﬁcation information is generated by clicking on the
generate modiﬁcations button and the modiﬁcations can be saved to either or 
both of the extension formats. As we do not have access to any of the dynamic 
solvers testing the dynamic formats is simply a veriﬁcation that the output 
ﬁles adhere to the speciﬁcations.

CLI implementation
------------------

java -jar AFGen.jar base-name [n] [p] [q] [r] [s]
ex:
java -jar AFGen.jar test 64 .5 .5 .01 .1

As tests tend to be created and then the output ﬁles used as input ﬁles for 
the diﬀerent solvers being tested, the GUI version would be adequate. Having 
a simple command-line tool for generating the results is not unreasonable and 
with the GUI version completed was simply the matter of parsing passed 
parameters and calling existing routines. The CLI version uses the following 
calling convention: AFGen base-name [n] [p] [q] [r] [s] 
The base name is required and is the non-postﬁx name to use for the ﬁles 
generated. The parameters without brackets are optional and are as follows: 
	n is nnumber of arguments to generate (default 100)
	p is chance any pair of arguments will attack (default .1)
	q is chance attack is mutual (default .34)
	r is chance new attack will be added (default .01)
	s is chance to remove existing attack (default .01). 
	
When ran, the program uses the base name and creates TGF and APX ﬁles will be
generated while if one or both of the r and s parameters are provided then in
addition to the TGF and APX ﬁles, TGFM and APXM ﬁles will also be produced 
with the dynamic version.

QStar
-----
java -jar QStar.jar p
ex:
java -jar QStar.jar .35

A simple utility to determine q* for a given value of p.
